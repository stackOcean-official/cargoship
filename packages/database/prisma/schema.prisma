// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Project {
  id           Int  @id @default(autoincrement())
  organization Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       Int
}

model Team {
  id       Int          @id @default(autoincrement())
  name     String
  members  Membership[]
  projects Project[]
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

model Membership {
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   Int
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  accepted Boolean        @default(false)
  role     MembershipRole

  @@id([userId, teamId])
}

enum IdentityProvider {
  EMAIL
  GITHUB
}

model Account {
  id                String  @id @default(cuid())
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model User {
  id                        Int              @id @default(autoincrement())
  name                      String?
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  password                  String?
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  identityProvider          IdentityProvider @default(EMAIL)
  identityProviderAccountId String?
  teams                     Membership[]
  accounts                  Account[]

  @@map(name: "users")
}
